// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace IranMarketer.Domain.Entity
{

    using System.Linq;

    public class IranMarketerContext : System.Data.Entity.DbContext, IIranMarketerContext
    {
        public System.Data.Entity.DbSet<AcademicField> AcademicFields { get; set; }
        public System.Data.Entity.DbSet<AdjustedPriceModel> AdjustedPriceModels { get; set; }
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<Industry> Industries { get; set; }
        public System.Data.Entity.DbSet<JobCategory> JobCategories { get; set; }
        public System.Data.Entity.DbSet<JobPost> JobPosts { get; set; }
        public System.Data.Entity.DbSet<JobPrefer> JobPrefers { get; set; }
        public System.Data.Entity.DbSet<JobPreferIndustry> JobPreferIndustries { get; set; }
        public System.Data.Entity.DbSet<JobPreferJobCategory> JobPreferJobCategories { get; set; }
        public System.Data.Entity.DbSet<JobRequest> JobRequests { get; set; }
        public System.Data.Entity.DbSet<LegalParty> LegalParties { get; set; }
        public System.Data.Entity.DbSet<Log> Logs { get; set; }
        public System.Data.Entity.DbSet<PartyUniversity> PartyUniversities { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<RetailParty> RetailParties { get; set; }
        public System.Data.Entity.DbSet<sec_AspNetRole> sec_AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<sec_AspNetUser> sec_AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<sec_AspNetUserClaim> sec_AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<sec_AspNetUserLogin> sec_AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<sec_AspNetUserRole> sec_AspNetUserRoles { get; set; }
        public System.Data.Entity.DbSet<sec_Client> sec_Clients { get; set; }
        public System.Data.Entity.DbSet<sec_ClientClaim> sec_ClientClaims { get; set; }
        public System.Data.Entity.DbSet<sec_ClientCorsOrigin> sec_ClientCorsOrigins { get; set; }
        public System.Data.Entity.DbSet<sec_ClientCustomGrantType> sec_ClientCustomGrantTypes { get; set; }
        public System.Data.Entity.DbSet<sec_ClientIdPRestriction> sec_ClientIdPRestrictions { get; set; }
        public System.Data.Entity.DbSet<sec_ClientPostLogoutRedirectUri> sec_ClientPostLogoutRedirectUris { get; set; }
        public System.Data.Entity.DbSet<sec_ClientRedirectUri> sec_ClientRedirectUris { get; set; }
        public System.Data.Entity.DbSet<sec_ClientScope> sec_ClientScopes { get; set; }
        public System.Data.Entity.DbSet<sec_ClientSecret> sec_ClientSecrets { get; set; }
        public System.Data.Entity.DbSet<sec_Consent> sec_Consents { get; set; }
        public System.Data.Entity.DbSet<sec_PageRepository> sec_PageRepositories { get; set; }
        public System.Data.Entity.DbSet<sec_Scope> sec_Scopes { get; set; }
        public System.Data.Entity.DbSet<sec_ScopeClaim> sec_ScopeClaims { get; set; }
        public System.Data.Entity.DbSet<sec_ScopeSecret> sec_ScopeSecrets { get; set; }
        public System.Data.Entity.DbSet<WorkExperience> WorkExperiences { get; set; }

        static IranMarketerContext()
        {
            System.Data.Entity.Database.SetInitializer(new System.Data.Entity.MigrateDatabaseToLatestVersion<IranMarketerContext, Init>());
        }

        public IranMarketerContext()
            : base("Name=StagingDbContext")
        {
        }

        public IranMarketerContext(string connectionString)
            : base(connectionString)
        {
        }

        public IranMarketerContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public IranMarketerContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public IranMarketerContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AcademicFieldMapper());
            modelBuilder.Configurations.Add(new AdjustedPriceModelMapper());
            modelBuilder.Configurations.Add(new AspNetRoleMapper());
            modelBuilder.Configurations.Add(new AspNetUserMapper());
            modelBuilder.Configurations.Add(new AspNetUserClaimMapper());
            modelBuilder.Configurations.Add(new AspNetUserLoginMapper());
            modelBuilder.Configurations.Add(new AspNetUserRoleMapper());
            modelBuilder.Configurations.Add(new DocumentMapper());
            modelBuilder.Configurations.Add(new IndustryMapper());
            modelBuilder.Configurations.Add(new JobCategoryMapper());
            modelBuilder.Configurations.Add(new JobPostMapper());
            modelBuilder.Configurations.Add(new JobPreferMapper());
            modelBuilder.Configurations.Add(new JobPreferIndustryMapper());
            modelBuilder.Configurations.Add(new JobPreferJobCategoryMapper());
            modelBuilder.Configurations.Add(new JobRequestMapper());
            modelBuilder.Configurations.Add(new LegalPartyMapper());
            modelBuilder.Configurations.Add(new LogMapper());
            modelBuilder.Configurations.Add(new PartyUniversityMapper());
            modelBuilder.Configurations.Add(new RegionMapper());
            modelBuilder.Configurations.Add(new RetailPartyMapper());
            modelBuilder.Configurations.Add(new sec_AspNetRoleMapper());
            modelBuilder.Configurations.Add(new sec_AspNetUserMapper());
            modelBuilder.Configurations.Add(new sec_AspNetUserClaimMapper());
            modelBuilder.Configurations.Add(new sec_AspNetUserLoginMapper());
            modelBuilder.Configurations.Add(new sec_AspNetUserRoleMapper());
            modelBuilder.Configurations.Add(new sec_ClientMapper());
            modelBuilder.Configurations.Add(new sec_ClientClaimMapper());
            modelBuilder.Configurations.Add(new sec_ClientCorsOriginMapper());
            modelBuilder.Configurations.Add(new sec_ClientCustomGrantTypeMapper());
            modelBuilder.Configurations.Add(new sec_ClientIdPRestrictionMapper());
            modelBuilder.Configurations.Add(new sec_ClientPostLogoutRedirectUriMapper());
            modelBuilder.Configurations.Add(new sec_ClientRedirectUriMapper());
            modelBuilder.Configurations.Add(new sec_ClientScopeMapper());
            modelBuilder.Configurations.Add(new sec_ClientSecretMapper());
            modelBuilder.Configurations.Add(new sec_ConsentMapper());
            modelBuilder.Configurations.Add(new sec_PageRepositoryMapper());
            modelBuilder.Configurations.Add(new sec_ScopeMapper());
            modelBuilder.Configurations.Add(new sec_ScopeClaimMapper());
            modelBuilder.Configurations.Add(new sec_ScopeSecretMapper());
            modelBuilder.Configurations.Add(new WorkExperienceMapper());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AcademicFieldMapper(schema));
            modelBuilder.Configurations.Add(new AdjustedPriceModelMapper(schema));
            modelBuilder.Configurations.Add(new AspNetRoleMapper(schema));
            modelBuilder.Configurations.Add(new AspNetUserMapper(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimMapper(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginMapper(schema));
            modelBuilder.Configurations.Add(new AspNetUserRoleMapper(schema));
            modelBuilder.Configurations.Add(new DocumentMapper(schema));
            modelBuilder.Configurations.Add(new IndustryMapper(schema));
            modelBuilder.Configurations.Add(new JobCategoryMapper(schema));
            modelBuilder.Configurations.Add(new JobPostMapper(schema));
            modelBuilder.Configurations.Add(new JobPreferMapper(schema));
            modelBuilder.Configurations.Add(new JobPreferIndustryMapper(schema));
            modelBuilder.Configurations.Add(new JobPreferJobCategoryMapper(schema));
            modelBuilder.Configurations.Add(new JobRequestMapper(schema));
            modelBuilder.Configurations.Add(new LegalPartyMapper(schema));
            modelBuilder.Configurations.Add(new LogMapper(schema));
            modelBuilder.Configurations.Add(new PartyUniversityMapper(schema));
            modelBuilder.Configurations.Add(new RegionMapper(schema));
            modelBuilder.Configurations.Add(new RetailPartyMapper(schema));
            modelBuilder.Configurations.Add(new sec_AspNetRoleMapper(schema));
            modelBuilder.Configurations.Add(new sec_AspNetUserMapper(schema));
            modelBuilder.Configurations.Add(new sec_AspNetUserClaimMapper(schema));
            modelBuilder.Configurations.Add(new sec_AspNetUserLoginMapper(schema));
            modelBuilder.Configurations.Add(new sec_AspNetUserRoleMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientClaimMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientCorsOriginMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientCustomGrantTypeMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientIdPRestrictionMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientPostLogoutRedirectUriMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientRedirectUriMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientScopeMapper(schema));
            modelBuilder.Configurations.Add(new sec_ClientSecretMapper(schema));
            modelBuilder.Configurations.Add(new sec_ConsentMapper(schema));
            modelBuilder.Configurations.Add(new sec_PageRepositoryMapper(schema));
            modelBuilder.Configurations.Add(new sec_ScopeMapper(schema));
            modelBuilder.Configurations.Add(new sec_ScopeClaimMapper(schema));
            modelBuilder.Configurations.Add(new sec_ScopeSecretMapper(schema));
            modelBuilder.Configurations.Add(new WorkExperienceMapper(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<SearchRegionsReturnModel> SearchRegions(string filter, int? type)
        {
            int procResult;
            return SearchRegions(filter, type, out procResult);
        }

        public System.Collections.Generic.List<SearchRegionsReturnModel> SearchRegions(string filter, int? type, out int procResult)
        {
            var filterParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filter", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = filter, Size = 100 };
            if (filterParam.Value == null)
                filterParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SearchRegionsReturnModel>("EXEC @procResult = [dbo].[SearchRegions] @filter, @type", filterParam, typeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SearchRegionsReturnModel>> SearchRegionsAsync(string filter, int? type)
        {
            var filterParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filter", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = filter, Size = 100 };
            if (filterParam.Value == null)
                filterParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SearchRegionsReturnModel>("EXEC [dbo].[SearchRegions] @filter, @type", filterParam, typeParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
