// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace IranMarketer.Domain.Entity
{

    using System.Linq;

    public class IranMarketerContext : System.Data.Entity.DbContext
    {
        public System.Data.Entity.DbSet<AcademicField> AcademicFields { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<Industry> Industries { get; set; }
        public System.Data.Entity.DbSet<JobCategory> JobCategories { get; set; }
        public System.Data.Entity.DbSet<JobPrefer> JobPrefers { get; set; }
       // public System.Data.Entity.DbSet<PageRepository> PageRepositories { get; set; }
        public System.Data.Entity.DbSet<PartyUniversity> PartyUniversities { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<RetailParty> RetailParties { get; set; }
        public System.Data.Entity.DbSet<WorkExperience> WorkExperiences { get; set; }
        public System.Data.Entity.DbSet<JobPost> JobPosts { get; set; }


        /// <summary>
        /// Initializes a new instance of the <see cref="IranMarketerContext"/> class.
        /// </summary>
        public IranMarketerContext()
            : base("Name=MutualFund")
        {
            this.Configuration.LazyLoadingEnabled = false;
       
        }

        public IranMarketerContext(string connectionString)
            : base(connectionString)
        {
        }

        public IranMarketerContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public IranMarketerContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public IranMarketerContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            return modelBuilder;
        }

      //  Stored Procedures
        public System.Collections.Generic.List<SearchRegionsReturnModel> SearchRegions(string filter, int? type)
        {
            int procResult;
            return SearchRegions(filter, type, out procResult);
        }

        public System.Collections.Generic.List<SearchRegionsReturnModel> SearchRegions(string filter, int? type, out int procResult)
        {
            var filterParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filter", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = filter, Size = 100 };
            if (filterParam.Value == null)
                filterParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SearchRegionsReturnModel>("EXEC @procResult = [dbo].[SearchRegions] @filter, @type", filterParam, typeParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SearchRegionsReturnModel>> SearchRegionsAsync(string filter, int? type)
        {
            var filterParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@filter", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = filter, Size = 100 };
            if (filterParam.Value == null)
                filterParam.Value = System.DBNull.Value;

            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@type", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = type.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!type.HasValue)
                typeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SearchRegionsReturnModel>("EXEC [dbo].[SearchRegions] @filter, @type", filterParam, typeParam).ToListAsync();

            return procResultData;
        }

        public System.Data.Entity.DbSet<IranMarketer.Domain.Entity.LegalParty> LegalParties { get; set; }
    }
}
// </auto-generated>
