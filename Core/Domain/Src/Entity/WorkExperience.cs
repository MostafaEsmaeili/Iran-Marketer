// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Newtonsoft.Json;
using Pikad.Framework.Infra.Utility;
using Pikad.Framework.Repository;

namespace IranMarketer.Domain.Entity
{

    // WorkExperience
    [Table("WorkExperience", Schema = "dbo")]
    public class WorkExperience : Entity<int>
    {

        [Column(@"PartyId", Order = 2, TypeName = "int")]
        [Required]
        [Display(Name = "Party ID")]
        public int PartyId { get; set; }

        [Column(@"JobTitle", Order = 3, TypeName = "nvarchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; }

        [Column(@"JobCategoryId", Order = 4, TypeName = "int")]
        [Display(Name = "Job category ID")]
        public int? JobCategoryId { get; set; }

        [Column(@"CompanyName", Order = 5, TypeName = "nvarchar")]
        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "Company name")]
        public string CompanyName { get; set; }

        [Column(@"IndustryId", Order = 6, TypeName = "int")]
        [Display(Name = "Industry ID")]
        public int? IndustryId { get; set; }

        [Column(@"CountryId", Order = 7, TypeName = "int")]
        [Display(Name = "Country ID")]
        public int? CountryId { get; set; }

        [Column(@"JobCityId", Order = 8, TypeName = "int")]
        [Display(Name = "JobCity ID")]
        public int? JobCityId { get; set; }

        [Column(@"FromDate", Order = 9, TypeName = "datetime")]
        [Display(Name = "From date")]
        public System.DateTime? FromDate { get; set; }

        [Column(@"ToDate", Order = 10, TypeName = "datetime")]
        [Display(Name = "To date")]
        public System.DateTime? ToDate { get; set; }

        [Column(@"Achievements", Order = 11, TypeName = "nvarchar(max)")]
        [Display(Name = "Achievements")]
        public string Achievements { get; set; }

        [Column(@"StillInThisWork", Order = 12, TypeName = "bit")]
        [Display(Name = "Still in this work")]
        public bool? StillInThisWork { get; set; }

    [JsonIgnore]

    [ForeignKey("JobCityId")] public virtual Region Region { get; set; }
        [JsonIgnore]

        [ForeignKey("IndustryId")] public virtual Industry Industry { get; set; }

        [JsonIgnore]

        [ForeignKey("JobCategoryId")] public virtual JobCategory JobCategory { get; set; }
        [JsonIgnore]

        [ForeignKey("PartyId")] public virtual RetailParty RetailParty { get; set; }


        public string FromDateJalali => FromDate != null && FromDate > new DateTime(1907, 1, 1)
            ? FromDate.ConvertMiladiToJalali()
            : null;

        public string ToDateJalali => ToDate != null && ToDate > new DateTime(1907, 1, 1)
            ? ToDate.ConvertMiladiToJalali()
            : null;
    }

}
// </auto-generated>
