// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using IranMarketer.Domain.Enum;
using Newtonsoft.Json;
using Pikad.Framework.Infra.Utility;
using Pikad.Framework.Repository;

namespace IranMarketer.Domain.Entity
{

    // PartyUniversities
    [Table("PartyUniversities", Schema = "dbo")]
    public class PartyUniversity :Entity<int>
    {

        [Column(@"DegreeLevel", Order = 2, TypeName = "int")]
        [Display(Name = "Degree level")]
        public int? DegreeLevel { get; set; }

        [Column(@"AcademicFieldId", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Academic field ID")]
        public int? AcademicFieldId { get; set; }

        [Column(@"University", Order = 4, TypeName = "nvarchar")]
        [MaxLength(300)]
        [StringLength(300)]
        [Display(Name = "University")]
        public string University { get; set; }

        [Column(@"CountryId", Order = 5, TypeName = "int")]
        [Display(Name = "Country ID")]
        public int? CountryId { get; set; }

        [Column(@"UniversityCityId", Order = 6, TypeName = "int")]
        [Display(Name = "City ID")]
        public int? UniversityCityId { get; set; }

        [Column(@"UniversityFromDate", Order = 7, TypeName = "datetime")]
        [Display(Name = "From date")]
        public DateTime? UniversityFromDate { get; set; }

        [Column(@"UniversityToDate", Order = 8, TypeName = "datetime")]
        [Display(Name = "To date")]
        public DateTime? UniversityToDate { get; set; }

        [Column(@"Average", Order = 9, TypeName = "float")]
        [Display(Name = "Average")]
        
        public float? Average { get; set; }

        [Column(@"PartyId", Order = 10, TypeName = "int")]
        [Required]
        [Display(Name = "Party ID")]
        public int PartyId { get; set; }


        [ForeignKey("AcademicFieldId")] public virtual AcademicField AcademicField { get; set; }
        [ForeignKey("UniversityCityId")] public virtual Region City { get; set; }
        [ForeignKey("CountryId")] public virtual Region Country { get; set; }
        [ForeignKey("PartyId")] public virtual RetailParty RetailParty { get; set; }
        public string FromDateJalali => UniversityFromDate != null && UniversityFromDate > new DateTime(1907, 1, 1)
            ? UniversityFromDate.ConvertMiladiToJalali()
            : null;

        public string ToDateJalali => UniversityToDate != null && UniversityToDate > new DateTime(1907, 1, 1)
            ? UniversityToDate.ConvertMiladiToJalali()
            : null;

        public string DegreeLevelTitle => DegreeLevel != null
            ? ((EducationDegree) DegreeLevel).GetDescription()
            : null;
    }

}
// </auto-generated>
